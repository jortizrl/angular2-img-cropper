{"version":3,"file":"cropperSettings.js","sourceRoot":"","sources":["../../src/cropperSettings.ts"],"names":[],"mappings":"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","sourcesContent":["import {CropperDrawSettings} from './cropperDrawSettings';\n\nexport interface ICropperSettings {\n    canvasWidth?: number;\n    canvasHeight?: number;\n    width?: number;\n    height?: number;\n    minWidth?: number;\n    minHeight?: number;\n    minWithRelativeToResolution?: boolean;\n    croppedWidth?: number;\n    croppedHeight?: number;\n    touchRadius?: number;\n    cropperDrawSettings?: any;\n    noFileInput?: boolean;\n    allowedFilesRegex?: RegExp;\n    rounded: boolean;\n    keepAspect: boolean;\n    preserveSize: boolean;\n    cropOnResize: boolean;\n    compressRatio: number;\n}\n\nexport class CropperSettings implements ICropperSettings {\n    public canvasWidth: number = 300;\n    public canvasHeight: number = 300;\n\n    public dynamicSizing: boolean = false;\n    public cropperClass: string;\n    public croppingClass: string;\n\n    public width: number = 200;\n    public height: number = 200;\n\n    public minWidth: number = 50;\n    public minHeight: number = 50;\n    public minWithRelativeToResolution: boolean = true;\n\n    public croppedWidth: number = 100;\n    public croppedHeight: number = 100;\n\n    public cropperDrawSettings: CropperDrawSettings = new CropperDrawSettings();\n    public touchRadius: number = 20;\n    public noFileInput: boolean = false;\n\n    public fileType:string;\n\n    public resampleFn:Function;\n\n    public allowedFilesRegex: RegExp = /\\.(jpe?g|png|gif)$/i;\n    public cropOnResize: boolean = true;\n    public preserveSize: boolean = false;\n\n    public compressRatio:number = 1.0;\n\n    private _rounded: boolean = false;\n    private _keepAspect: boolean = true;\n\n\n    constructor(settings?: any) {\n        if (typeof settings === 'object') {\n            this.canvasWidth = settings.canvasWidth || this.canvasWidth;\n            this.canvasHeight = settings.canvasHeight || this.canvasHeight;\n            this.width = settings.width || this.width;\n            this.height = settings.height || this.height;\n            this.minWidth = settings.minWidth || this.minWidth;\n            this.minHeight = settings.minHeight || this.minHeight;\n            this.minWithRelativeToResolution = settings.minWithRelativeToResolution || this.minWithRelativeToResolution;\n            this.croppedWidth = settings.croppedWidth || this.croppedWidth;\n            this.croppedHeight = settings.croppedHeight || this.croppedHeight;\n            this.touchRadius = settings.touchRadius || this.touchRadius;\n            this.cropperDrawSettings = settings.cropperDrawSettings || this.cropperDrawSettings;\n            this.noFileInput = settings.noFileInput || this.noFileInput;\n            this.allowedFilesRegex = settings.allowedFilesRegex || this.allowedFilesRegex;\n            this.rounded = settings.rounded || this.rounded;\n            this.keepAspect = settings.keepAspect || this.keepAspect;\n            this.preserveSize = settings.preserveSize || this.preserveSize;\n            this.cropOnResize = settings.cropOnResize || this.cropOnResize;\n            this.compressRatio = settings.compressRatio || this.compressRatio;\n\n            this.cropperDrawSettings = settings.cropperDrawSettings || this.cropperDrawSettings;\n        }\n    }\n\n    set rounded(val: boolean) {\n        this._rounded = val;\n        if (val) {\n            this._keepAspect = true;\n        }\n    }\n\n    get rounded(): boolean {\n        return this._rounded;\n    }\n\n    set keepAspect(val: boolean) {\n        if (val === false && this._rounded) {\n            throw new Error('Cannot set keep aspect to false on rounded cropper. Ellipsis not supported');\n        }\n\n        this._keepAspect = val;\n    }\n\n    get keepAspect(): boolean {\n        return this._keepAspect;\n    }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}